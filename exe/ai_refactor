#!/usr/bin/env ruby

require "optparse"
require "colorize"
require "openai"
require "shellwords"
require_relative "../lib/ai_refactor"

require "dotenv/load"

supported_refactors = AIRefactor::Refactors.all
refactors_descriptions = AIRefactor::Refactors.descriptions

arguments = ARGV.dup

options_from_config_file = AIRefactor::Cli.load_options_from_config_file
arguments += options_from_config_file if options_from_config_file

run_config = AIRefactor::RunConfiguration.new

# General options for all refactor types
option_parser = OptionParser.new do |parser|
  parser.banner = "Usage: ai_refactor REFACTOR_TYPE_OR_COMMAND_FILE INPUT_FILE_OR_DIR [options]\n\nWhere REFACTOR_TYPE_OR_COMMAND_FILE is either the path to a command YML file, or one of the refactor types to run: \n- #{refactors_descriptions.to_a.map { |refactor| refactor.join(": ") }.join("\n- ")}\n\n"

  parser.on("-o", "--output [FILE]", String, "Write output to given file instead of stdout. If no path provided will overwrite input file (will prompt to overwrite existing files). Some refactor tasks will write out to a new file by default. This option will override the tasks default behaviour.") do |f|
    run_config.output_file_path = f
  end

  parser.on("-O", "--output-template TEMPLATE", String, "Write outputs to files instead of stdout. The template is used to create the output name, where the it can have substitutions, '[FILE]', '[NAME]', '[DIR]', '[REFACTOR]' & '[EXT]'. Eg `[DIR]/[NAME]_[REFACTOR][EXT]` (will prompt to overwrite existing files)") do |t|
    run_config.output_template_path = t
  end

  parser.on("-c", "--context CONTEXT_FILES", Array, "Specify one or more files to use as context for the AI. The contents of these files will be prepended to the prompt sent to the AI.") do |c|
    run_config.context_file_paths = c
  end

  parser.on("-x", "--extra CONTEXT_TEXT", String, "Specify some text to be prepended to the prompt sent to the AI as extra information of note.") do |c|
    run_config.context_text = c
  end

  parser.on("-r", "--review-prompt", "Show the prompt that will be sent to ChatGPT but do not actually call ChatGPT or make changes to files.") do
    run_config.review_prompt = true
  end

  parser.on("-p", "--prompt PROMPT_FILE", String, "Specify path to a text file that contains the ChatGPT 'system' prompt.") do |f|
    run_config.prompt_file_path = f
  end

  parser.on("-f", "--diffs", "Request AI generate diffs of changes rather than writing out the whole file.") do
    run_config.diff = true
  end

  parser.on("-C", "--continue [MAX_MESSAGES]", Integer, "If ChatGPT stops generating due to the maximum token count being reached, continue to generate more messages, until a stop condition or MAX_MESSAGES. MAX_MESSAGES defaults to 3") do |c|
    run_config.ai_max_attempts = c
  end

  parser.on("-m", "--model MODEL_NAME", String, "Specify a ChatGPT model to use (default gpt-4).") do |m|
    run_config.ai_model = m
  end

  parser.on("--temperature TEMP", Float, "Specify the temperature parameter for ChatGPT (default 0.7).") do |p|
    run_config.ai_temperature = p
  end

  parser.on("--max-tokens MAX_TOKENS", Integer, "Specify the max number of tokens of output ChatGPT can generate. Max will depend on the size of the prompt (default 1500)") do |m|
    run_config.ai_max_tokens = m
  end

  parser.on("-t", "--timeout SECONDS", Integer, "Specify the max wait time for ChatGPT response.") do |m|
    run_config.ai_timeout = m
  end

  parser.on("--overwrite ANSWER", "Always overwrite existing output files, 'y' for yes, 'n' for no, or 'a' for ask. Default to ask.") do |a|
    run_config.overwrite = a
  end

  parser.on("-N", "--no", "Never overwrite existing output files, same as --overwrite=n.") do |a|
    run_config.overwrite = "n"
  end

  parser.on("-v", "--verbose", "Show extra output and progress info") do
    run_config.verbose = true
  end

  parser.on("-d", "--debug", "Show debugging output to help diagnose issues") do
    run_config.debug = true
  end

  parser.on("-h", "--help", "Prints this help") do
    puts parser
    exit
  end

  parser.separator ""

  # Example in Refactor class:
  #
  # class << self
  #   def command_line_options
  #     [
  #       {
  #         key: :my_option_key,
  #         short: "-s",
  #         long: "--long-form-cli-param [FILE]",
  #         type: String,
  #         help: "help text"
  #       },
  #       ...
  #     ]
  #   end
  # end
  supported_refactors.each do |name, refactorer|
    parser.separator "For refactor type '#{name}':" if refactorer.command_line_options.size.positive?
    refactorer.command_line_options.each do |option|
      args = [option[:long], option[:type], option[:help]]
      args.unshift(option[:short]) if option[:short]
      AIRefactor::RunConfiguration.add_new_option(option[:key])
      parser.on(*args) do |o|
        run_config.send("#{option[:key]}=", o.nil? ? true : o)
      end
    end
  end
end

def exit_with_option_error(message, option_parser = nil, logger = nil)
  logger ? logger.error(message, bold: true) : puts(message)
  puts option_parser if option_parser
  exit false
end

def exit_with_error(message, logger = nil)
  logger ? logger.error(message, bold: true) : puts(message)
  exit false
end

# If no command was provided, prompt for one in interactive mode
if arguments.empty? || arguments.all? { |arg| arg.start_with?("-") && !(arg == "-h" || arg == "--help") }
  interactive_log = AIRefactor::Logger.new
  # For each option that is required but not provided, prompt for it
  # Put the option in arguments to parse with option_parser
  interactive_log.info "Interactive mode started. You can use tab to autocomplete:"
  predefined_commands = AIRefactor::Refactors.names

  interactive_log.info "Available refactors: #{predefined_commands.join(", ")}\n"
  command = AIRefactor::Cli.request_input_with_autocomplete("Enter refactor name: ", predefined_commands)
  exit_with_option_error("No refactor name provided.", option_parser) if command.nil? || command.empty?
  initial = [command]

  input_path = AIRefactor::Cli.request_file_inputs("Enter input file path: ", multiple: false)
  exit_with_option_error("No input file path provided.", option_parser) if input_path.nil? || input_path.empty?
  initial << input_path

  arguments.prepend(*initial)

  # Ask if template should be used - then prompt for it

  output = AIRefactor::Cli.request_file_inputs("Enter output file path (blank for refactor default): ", multiple: false)
  arguments.concat(["-o", " #{output}"]) unless output.nil? || output.empty?

  context_text = AIRefactor::Cli.request_text_input("Enter extra text to add to prompt (blank for none): ")
  arguments.concat(["-x", context_text]) unless context_text.nil? || context_text.empty?

  context_files = AIRefactor::Cli.request_file_inputs("Enter extra context file path(s) (blank for none): ")
  arguments.concat(["-c", context_files]) unless context_files.nil? || context_files.empty?

  prompt_file = AIRefactor::Cli.request_file_inputs("Enter Prompt file path (blank for refactor default): ", multiple: false)
  arguments.concat(["-p", prompt_file]) unless prompt_file.nil? || prompt_file.empty?

  review = AIRefactor::Cli.request_switch("Dry-run (review prompt only)? (y/N) (blank for 'N'): ")
  arguments << "-r" if review
end

File.write(".ai_refactor_history", arguments.join(" ") + "\n", mode: "a")

begin
  option_parser.parse!(arguments)
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  exit_with_option_error($!, option_parser)
end

logger = AIRefactor::Logger.new(verbose: run_config.verbose, debug: run_config.debug)
logger.info "Also loaded options from '.ai_refactor' file..." if options_from_config_file&.size&.positive?

command_or_file = arguments.shift
if AIRefactor::CommandFileParser.command_file?(command_or_file)
  logger.info "Loading refactor command file '#{command_or_file}'..."
  begin
    run_config.set!(AIRefactor::CommandFileParser.new(command_or_file).parse)
  rescue => e
    exit_with_option_error(e.message, option_parser, logger)
  end
else
  logger.info "Requested to run refactor '#{command_or_file}'..."
end

run_config.input_file_paths = arguments

job = AIRefactor::Cli.new(run_config, logger: logger)

unless job.valid?
  exit_with_error("Refactor job failed or was not correctly configured. Did you specify the required inputs or options?.", logger)
end

unless job.run
  exit false
end
