#!/usr/bin/env ruby

require "optparse"
require "colorize"
require "openai"
require_relative "../lib/ai_refactor"

require "dotenv/load"

options = {}

supported_refactors = AIRefactor::Refactors.all
descriptions = AIRefactor::Refactors.descriptions

# General options for all refactor types
option_parser = OptionParser.new do |parser|
  parser.banner = "Usage: ai_refactor REFACTOR_TYPE INPUT_FILE_OR_DIR [options]\n\nWhere REFACTOR_TYPE is one of: \n- #{descriptions.to_a.map { |refactor| refactor.join(": ") }.join("\n- ")}\n\n"

  parser.on("-o", "--output [FILE]", String, "Write output to given file instead of stdout. If no path provided will overwrite input file (will prompt to overwrite existing files). Some refactor tasks will write out to a new file by default. This option will override the tasks default behaviour.") do |f|
    options[:output_file_path] = f
  end

  parser.on("-O", "--output-template TEMPLATE", String, "Write outputs to files instead of stdout. The template is used to create the output name, where the it can have substitutions, '[FILE]', '[NAME]', '[DIR]', '[REFACTOR]' & '[EXT]'. Eg `[DIR]/[NAME]_[REFACTOR][EXT]` (will prompt to overwrite existing files)") do |t|
    options[:output_template_path] = t
  end

  parser.on("-c", "--context CONTEXT_FILES", Array, "Specify one or more files to use as context for the AI. The contents of these files will be prepended to the prompt sent to the AI.") do |c|
    options[:context_file_paths] = c
  end

  parser.on("-r", "--review-prompt", "Show the prompt that will be sent to ChatGPT but do not actually call ChatGPT or make changes to files.") do
    options[:review_prompt] = true
  end

  parser.on("-p", "--prompt PROMPT_FILE", String, "Specify path to a text file that contains the ChatGPT 'system' prompt.") do |f|
    options[:prompt_file_path] = f
  end

  parser.on("-f", "--diffs", "Request AI generate diffs of changes rather than writing out the whole file.") do
    options[:diff] = true
  end

  parser.on("-C", "--continue [MAX_MESSAGES]", Integer, "If ChatGPT stops generating due to the maximum token count being reached, continue to generate more messages, until a stop condition or MAX_MESSAGES. MAX_MESSAGES defaults to 3") do |c|
    options[:ai_max_attempts] = c || 3
  end

  parser.on("-m", "--model MODEL_NAME", String, "Specify a ChatGPT model to use (default gpt-4).") do |m|
    options[:ai_model] = m
  end

  parser.on("--temperature TEMP", Float, "Specify the temperature parameter for ChatGPT (default 0.7).") do |p|
    options[:ai_temperature] = p
  end

  parser.on("--max-tokens MAX_TOKENS", Integer, "Specify the max number of tokens of output ChatGPT can generate. Max will depend on the size of the prompt (default 1500)") do |m|
    options[:ai_max_tokens] = m
  end

  parser.on("-t", "--timeout SECONDS", Integer, "Specify the max wait time for ChatGPT response.") do |m|
    options[:ai_timeout] = m
  end

  parser.on("--overwrite ANSWER", "Always overwrite existing output files, 'y' for yes, 'n' for no, or 'a' for ask. Default to ask.") do |a|
    options[:overwrite] = a
  end

  parser.on("-N", "--no", "Never overwrite existing output files, same as --overwrite=n.") do |a|
    options[:overwrite] = "n"
  end

  parser.on("-v", "--verbose", "Show extra output and progress info") do
    options[:verbose] = true
  end

  parser.on("-d", "--debug", "Show debugging output to help diagnose issues") do
    options[:debug] = true
  end

  parser.on("-h", "--help", "Prints this help") do
    puts parser
    exit
  end

  parser.separator ""

  # Example in Refactor class:
  #
  # class << self
  #   def command_line_options
  #     [
  #       {
  #         key: :my_option_key,
  #         short: "-s",
  #         long: "--long-form-cli-param [FILE]",
  #         type: String,
  #         help: "help text"
  #       },
  #       ...
  #     ]
  #   end
  # end
  supported_refactors.each do |name, refactorer|
    parser.separator "For refactor type '#{name}':" if refactorer.command_line_options.size.positive?
    refactorer.command_line_options.each do |option|
      args = [option[:long], option[:type], option[:help]]
      args.unshift(option[:short]) if option[:short]
      parser.on(*args) do |o|
        options[option[:key]] = o.nil? ? true : o
      end
    end
  end
end

option_parser.parse!

logger = AIRefactor::Logger.new(verbose: options[:verbose], debug: options[:debug])

job = ::AIRefactor::Cli.new(refactoring_type: ARGV.shift, inputs: ARGV, options: options, logger: logger)

unless job.valid?
  puts option_parser.help
  exit 1
end

unless job.run
  exit 1
end
